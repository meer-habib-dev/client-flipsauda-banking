{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction isValidCPF(cpf) {\n  if (typeof cpf !== \"string\") return false;\n  cpf = cpf.replace(/[\\s.-]*/igm, '');\n  if (!cpf || cpf.length != 11 || cpf == \"00000000000\" || cpf == \"11111111111\" || cpf == \"22222222222\" || cpf == \"33333333333\" || cpf == \"44444444444\" || cpf == \"55555555555\" || cpf == \"66666666666\" || cpf == \"77777777777\" || cpf == \"88888888888\" || cpf == \"99999999999\") {\n    return false;\n  }\n  var soma = 0;\n  var resto;\n  for (var i = 1; i <= 9; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(9, 10))) return false;\n  soma = 0;\n  for (var i = 1; i <= 10; i++) soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != parseInt(cpf.substring(10, 11))) return false;\n  return true;\n}\nfunction isValidCNPJ(cnpj) {\n  if (!cnpj) return false;\n  var isString = typeof cnpj === 'string';\n  var validTypes = isString || Number.isInteger(cnpj) || Array.isArray(cnpj);\n  if (!validTypes) return false;\n  if (isString) {\n    if (cnpj.length > 18) return false;\n    var isnum = /^\\d+$/.test(cnpj);\n    if (!isnum && typeof cnpj === 'string') return false;\n    var digitsOnly = /^\\d{14}$/.test(cnpj);\n    var validFormat = /^\\d{2}.\\d{3}.\\d{3}\\/\\d{4}-\\d{2}$/.test(cnpj);\n    if (digitsOnly || validFormat) true;else return false;\n  }\n  var match = cnpj.toString().match(/\\d/g);\n  var numbers = Array.isArray(match) ? match.map(Number) : [];\n  if (numbers.length !== 14) return false;\n  var items = _toConsumableArray(new Set(numbers));\n  if (items.length === 1) return false;\n  var calc = function calc(x) {\n    var slice = numbers.slice(0, x);\n    var factor = x - 7;\n    var sum = 0;\n    for (var i = x; i >= 1; i--) {\n      var n = slice[x - i];\n      sum += n * factor--;\n      if (factor < 2) factor = 9;\n    }\n    var result = 11 - sum % 11;\n    return result > 9 ? 0 : result;\n  };\n  var digits = numbers.slice(12);\n  var digit0 = calc(12);\n  if (digit0 !== digits[0]) return false;\n  var digit1 = calc(13);\n  return digit1 === digits[1];\n}\nexport { isValidCPF, isValidCNPJ };","map":{"version":3,"names":["isValidCPF","cpf","replace","length","soma","resto","i","parseInt","substring","isValidCNPJ","cnpj","isString","validTypes","Number","isInteger","Array","isArray","isnum","test","digitsOnly","validFormat","match","toString","numbers","map","items","_toConsumableArray","Set","calc","x","slice","factor","sum","n","result","digits","digit0","digit1"],"sources":["C:/Users/bruno/Projetos/iflip/flipsaude-banking/src/utils/validacpfandcnpj.ts"],"sourcesContent":["function isValidCPF(cpf){\r\n  if (typeof cpf !== \"string\") return false\r\n  cpf = cpf.replace(/[\\s.-]*/igm, '')\r\n  if (\r\n      !cpf ||\r\n      cpf.length != 11 ||\r\n      cpf == \"00000000000\" ||\r\n      cpf == \"11111111111\" ||\r\n      cpf == \"22222222222\" ||\r\n      cpf == \"33333333333\" ||\r\n      cpf == \"44444444444\" ||\r\n      cpf == \"55555555555\" ||\r\n      cpf == \"66666666666\" ||\r\n      cpf == \"77777777777\" ||\r\n      cpf == \"88888888888\" ||\r\n      cpf == \"99999999999\" \r\n  ) {\r\n      return false\r\n  }\r\n  var soma = 0\r\n  var resto\r\n  for (var i = 1; i <= 9; i++) \r\n      soma = soma + parseInt(cpf.substring(i-1, i)) * (11 - i)\r\n  resto = (soma * 10) % 11\r\n  if ((resto == 10) || (resto == 11))  resto = 0\r\n  if (resto != parseInt(cpf.substring(9, 10)) ) return false\r\n  soma = 0\r\n  for (var i = 1; i <= 10; i++) \r\n      soma = soma + parseInt(cpf.substring(i-1, i)) * (12 - i)\r\n  resto = (soma * 10) % 11\r\n  if ((resto == 10) || (resto == 11))  resto = 0\r\n  if (resto != parseInt(cpf.substring(10, 11) ) ) return false\r\n  return true\r\n}\r\n\r\nfunction isValidCNPJ(cnpj) {\r\n    if (!cnpj) return false\r\n  \r\n    // Aceita receber o valor como string, número ou array com todos os dígitos\r\n    const isString = typeof cnpj === 'string'\r\n    const validTypes = isString || Number.isInteger(cnpj) || Array.isArray(cnpj)\r\n  \r\n    // Elimina valor em formato inválido\r\n    if (!validTypes) return false\r\n  \r\n    // Filtro inicial para entradas do tipo string\r\n    if (isString) {\r\n      // Limita ao máximo de 18 caracteres, para CNPJ formatado\r\n      if (cnpj.length > 18) return false\r\n\r\n      // Se for do tipo string verifica se há somente numeros\r\n      const isnum = /^\\d+$/.test(cnpj);\r\n      if (!isnum && typeof cnpj === 'string') return false;\r\n  \r\n      // Teste Regex para veificar se é uma string apenas dígitos válida\r\n      const digitsOnly = /^\\d{14}$/.test(cnpj)\r\n      // Teste Regex para verificar se é uma string formatada válida\r\n      const validFormat = /^\\d{2}.\\d{3}.\\d{3}\\/\\d{4}-\\d{2}$/.test(cnpj)\r\n  \r\n      // Se o formato é válido, usa um truque para seguir o fluxo da validação\r\n      if (digitsOnly || validFormat) true\r\n      // Se não, retorna inválido\r\n      else return false\r\n    }\r\n  \r\n    // Guarda um array com todos os dígitos do valor\r\n    const match = cnpj.toString().match(/\\d/g)\r\n    const numbers = Array.isArray(match) ? match.map(Number) : []\r\n  \r\n    // Valida a quantidade de dígitos\r\n    if (numbers.length !== 14) return false\r\n    \r\n    // Elimina inválidos com todos os dígitos iguais\r\n    const items = [...new Set(numbers)]\r\n    if (items.length === 1) return false\r\n  \r\n    // Cálculo validador\r\n    const calc = (x) => {\r\n      const slice = numbers.slice(0, x)\r\n      let factor = x - 7\r\n      let sum = 0\r\n  \r\n      for (let i = x; i >= 1; i--) {\r\n        const n = slice[x - i]\r\n        sum += n * factor--\r\n        if (factor < 2) factor = 9\r\n      }\r\n  \r\n      const result = 11 - (sum % 11)\r\n  \r\n      return result > 9 ? 0 : result\r\n    }\r\n  \r\n    // Separa os 2 últimos dígitos de verificadores\r\n    const digits = numbers.slice(12)\r\n    \r\n    // Valida 1o. dígito verificador\r\n    const digit0 = calc(12)\r\n    if (digit0 !== digits[0]) return false\r\n  \r\n    // Valida 2o. dígito verificador\r\n    const digit1 = calc(13)\r\n    return digit1 === digits[1]\r\n  }\r\n\r\nexport {isValidCPF, isValidCNPJ}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}